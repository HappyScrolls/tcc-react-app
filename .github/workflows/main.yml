name: React App CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 파이프라인 실행

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/react-app .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/react-app

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: root
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            # Ensure Docker network exists
            docker network inspect root_app-network >/dev/null 2>&1 || docker network create root_app-network

            # Stop and remove existing container
            existing_container=$(docker ps -q --filter "ancestor=${{ secrets.DOCKER_HUB_USERNAME }}/react-app")
            if [[ -n "$existing_container" ]]; then
              docker stop $existing_container
              docker rm $existing_container
            fi

            # Prune old images
            docker image prune -f

            # Pull and run the new container
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/react-app
            docker run -d --name react_app --network root_app-network -p 80:3001 ${{ secrets.DOCKER_HUB_USERNAME }}/react-app
